% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cls_methods.R
\name{apply_cls_method}
\alias{apply_cls_method}
\title{Wrapper to apply caret::train function}
\usage{
apply_cls_method(cls_method, feature_set, training_data, training_labels,
  cv_folds = 10, rep = 3, tune_length = 10, metric = "Kappa")
}
\arguments{
\item{cls_method}{[character] a \code{character} vector of length 1 with the
classification method to be applied. To use in "method" argument of
\link[caret]{train}.}

\item{feature_set}{[character] a \code{character} vector with the feature
selection to be used.}

\item{training_data}{[data.frame] training data set (only features, not
labels). Samples as rows and features as columns.}

\item{training_labels}{[factor] training class labels.}

\item{cv_folds}{[numeric] an \code{integer} indicating the k folds to use in
k-fold cross-validation method. To use in "number" argument of
\link[caret]{trainControl}. Default: 10.}

\item{rep}{[numeric] an \code{integer} indicating the times to repeat the
cross-validation method. To use in "repeats" argument of
\link[caret]{trainControl}. Default: 3.}

\item{tune_length}{[numeric] an \code{integer} to use in "tuneLength"
argument of \link[caret]{train}. Default: 10.}

\item{metric}{[character] a \code{character} vector of length 1 that can be
either "Kappa" or "Accuracy", to indicate the metric use to select the
best tune for the classification model. To use in "metric" argument of
\link[caret]{train}. Default: "Kappa".}
}
\value{
an object of \code{train} class.
}
\description{
This is a wrapper of the \link[caret]{train} function. It is configured to
perform "repeatedcv" method exclusively. To use with
\link[methylearning]{ml_cls} constructor function.
}
\examples{
set.seed(1234)
tr_dat <- data.frame(a = runif(10),
                     b = runif(10),
                     c = runif(10),
                     d = runif(10))
tr_lab <- as.factor(c(rep("classA", 5), rep("classB", 5)))
model_cv <- apply_cls_method("knn", c("a", "b"), tr_dat, tr_lab)
print(model_cv)

}
