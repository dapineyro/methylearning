% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ml_cls.R
\name{ml_cls}
\alias{ml_cls}
\title{Creates \code{ml_cls} objects}
\usage{
ml_cls(ml_fs_obj, cls_methods = "all", fs_methods = "all", cv_folds = 10,
  rep = 3, tune_length = 10, metric = "Kappa", test_eval = FALSE,
  cores = 1)
}
\arguments{
\item{ml_fs_obj}{[ml_fs] input \code{data.frame} with samples as rows and
features as columns. There must be an extra column with class labels.}

\item{cls_methods}{[character] a \code{character} vector with the
classification methods to be applied. Possible values: c("all",
methylearning::available_cls_methods()). Default: "all".}

\item{fs_methods}{[character] a \code{character} vector with the feature
selection methods to be selected. Possible values: c("none", "all",
"filters", "wrappers", methylearning::selection_methods(ml_fs_obj)).
Values "all", "filters" and "wrappers" can only be indicated alone, or in
combination with "None". Value "none" means to use all the features,
regardless any feature selection method applied. Default: "all".}

\item{cv_folds}{[numeric] an \code{integer} indicating the k folds to use in
k-fold cross-validation method. To use in "number" argument of
\link[caret]{trainControl}. Default: 10.}

\item{rep}{[numeric] an \code{integer} indicating the times to repeat the
cross-validation method. To use in "repeats" argument of
\link[caret]{trainControl}. Default: 3.}

\item{tune_length}{[numeric] an \code{integer} to use in "tuneLength"
argument of \link[caret]{train}. Default: 10.}

\item{metric}{[character] a \code{character} vector of length 1 that can be
either "Kappa" or "Accuracy", to indicate the metric use to select the
best tune for the classification model. To use in "metric" argument of
\link[caret]{train}. Default: "Kappa".}

\item{test_eval}{[logical] whether to predict using test data and store the
performance evaluation. Only applicable if data was previously partitioned
in training and test data. Default: FALSE.}

\item{cores}{[numeric] number of cores to be used in parallel parts.
Default: 1.}
}
\value{
An object of [ml_cls] class.
}
\description{
Constructor for \code{ml_cls} objects. This object is created from a
\code{ml_fs} object, using the feature selections that it contains to
train and validate the indicated classification methods.
}
\details{
Object members:
\describe{
\item{fs_methods [character]}{a character vector with the feature selection
  methods applied.}
\item{cls_methods [character]}{a character vector with the classification
  methods applied.}
\item{validation_method [character]}{an string describing the validation
  method applied.}
\item{metric [character]}{metric used for select the best model during
  validation. One of c("Accuracy", "Kappa").}
\item{feature_list [list]}{a named list whith each feature selection.}
\item{fs_lengths [list]}{a named list with the length of each feature
  selection.}
\item{original_features [character]}{a character vector with the complete set
  of original features.}
\item{sample_names [character]}{a character vector with the sample names.}
\item{training_labels [factor]}{a factor with the training labels for
  classification.}
\item{data_partitioned [logical]}{a logical (TRUE or FALSE) indicating
  whether data was previously partitioned in training and test datasets.}
\item{cls_results [list]}{a list of lists. Each element of the list
  corresponds to a feature selection method used that in turn is a list in
  which each element is a classification method used. Is the return of
  \link[methylearning]{apply_cls_method} on each element.}
\item{test_evaluation [list]}{a list of lists. Each element of the list
  corresponds to a feature selection method used that in turn is a list in
  which each element is a classification method used. Is the return of
  \link[methylearning]{evaluation} on each element.}
\item{fs_computation_time [list]}{List of numeric vectors, with the
  computation time elapsed in each feature selection computation.}
\item{cls_computation_time [list]}{a list of lists. Each element of the list
  corresponds to a feature selection method used that in turn is a list in
  which each element is a classification method used. The values are
  numeric vectors with the elapsed computation time for each classification.}
}

Object methods:
[summary]
[plot]
[plot_test]
[get_training_results]
[get_test_results]
[get_best_model]
[get_best_model_test]
[get_confusionMatrix_test]
[get_best_feature_set]
[get_best_feature_set_test]
}
\examples{
set.seed(1234)
\dontrun{
if (require(GEOquery) &
    require(Biobase)) {
  gse <- getGEO("GSE69229")
  # Generate ml_data object.
  ml <- get_GEO_methylarray(gse = gse, target_name = "outcome:ch1")
  # Generate ml_fs object.
  ml_f <- ml_fs(ml, fs_methods = "anova_fs", selection_size = 50)
  # Generate ml_cls object.
  ml_c <- ml_cls(ml_f, cls_methods = "knn")
  summary(ml_c)
}
}

}
