% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ml_fs.R
\name{ml_fs}
\alias{ml_fs}
\title{Create \code{ml_fs} objects}
\usage{
ml_fs(ml_data_obj, fs_methods, selection_size, use_all_data = TRUE,
  cores = 1)
}
\arguments{
\item{ml_data_obj}{[ml_data] an object of \code{ml_data} class.}

\item{fs_methods}{[character] a character vector containing one or more of
the implemented methods. Use \code{available_fs_methods} to get all the
methods currently implemented. Alternatively, one can specify "all", to
select all the implemented methods, "filters", to select all the filter
methods and "wrappers", to select all the wrappers.}

\item{selection_size}{[numeric] the maximum number of features to collect
from each method.}

\item{use_all_data}{[logical] TRUE makes to use all the data (training +
test) to feature selection. FALSE makes to use only the training data.
Default: TRUE.}

\item{cores}{[numeric] number of processor cores to use. Default: 1.}
}
\value{
An object of \code{ml_fs} class.
}
\description{
Constructor for \code{ml_fs} objects. This object takes an
\code{ml_data} object, performs one or more feature selection procedures and
returns an \code{ml_fs} object, which encapsulates all
\code{ml_data} and results of the feature selection procedures.
}
\details{
Object members:
All the \code{ml_data} members, plus:
\describe{
\item{selection_methods [character]}{Selections methods applied.}
\item{selection_results [list]}{List of character vectors, with the feature
  selection of each method applied.}
\item{computation_time [list]}{List of numeric vectors, with the computation
  time elapsed in each feature selection computation.}
}

Object methods:
all the \code{ml_data} objects plus:
\describe{
[selection_methods]
[selection_results]
[plot_venn_fs]
[selection_df]
[plot_fs_time]
}
}
\examples{
\dontrun{
if (require(GEOquery) &
    require(Biobase)) {
  gse <- getGEO("GSE69229")
  ml <- get_GEO_methylarray(gse = gse, target_name = "outcome:ch1")
  summary(ml)
  ml_partitioned <- split_data(ml)
  summary(ml_partitioned)
  ml_fs_obj <- ml_fs(ml_partitioned, fs_methods = "anova_fs",
                     selection_size = 50)
  summary(ml_fs_obj)
}
}

}
